{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/tanjim/Projects/app/src/context/GlobalState.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useReducer } from \"react\"; //Reducer\n\nconst AppReducer = (state, action) => {\n  switch (action.type) {\n    case 'DELETE':\n      return { ...state,\n        transactions: state.transactions.filter(trans => trans.id !== action.payload)\n      };\n\n    case 'ADD':\n      return { ...state,\n        transactions: [...state.transactions, action.payload]\n      };\n\n    default:\n      return state;\n  }\n};\n\n_c = AppReducer;\nconst initialState = {\n  transactions: []\n}; //Create context\n\nexport const GlobalContext = /*#__PURE__*/createContext(initialState); //Provider component\n\nexport const GlobalProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(AppReducer, initialState); //Actions\n\n  function deleteTransaction(id) {\n    dispatch({\n      type: 'DELETE',\n      payload: id\n    });\n  }\n\n  function addTransaction(trans) {\n    dispatch({\n      type: 'ADD',\n      payload: trans\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(GlobalContext.Provider, {\n    value: {\n      transactions: state.transactions,\n      deleteTransaction,\n      addTransaction\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GlobalProvider, \"UrEkDPQH5U12xnblC9PjDJeyoVE=\");\n\n_c2 = GlobalProvider;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"AppReducer\");\n$RefreshReg$(_c2, \"GlobalProvider\");","map":{"version":3,"sources":["/home/tanjim/Projects/app/src/context/GlobalState.js"],"names":["createContext","useReducer","AppReducer","state","action","type","transactions","filter","trans","id","payload","initialState","GlobalContext","GlobalProvider","children","dispatch","deleteTransaction","addTransaction"],"mappings":";;;;;AAAA,SAASA,aAAT,EAAuBC,UAAvB,QAAyC,OAAzC,C,CACA;;AAEA,MAAMC,UAAU,GAAG,CAACC,KAAD,EAAOC,MAAP,KAAgB;AAC/B,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,QAAL;AACI,aAAM,EACF,GAAGF,KADD;AAEFG,QAAAA,YAAY,EAAEH,KAAK,CAACG,YAAN,CAAmBC,MAAnB,CAA0BC,KAAK,IAAEA,KAAK,CAACC,EAAN,KAAaL,MAAM,CAACM,OAArD;AAFZ,OAAN;;AAIJ,SAAK,KAAL;AACI,aAAM,EACF,GAAGP,KADD;AAEFG,QAAAA,YAAY,EAAC,CAAC,GAAGH,KAAK,CAACG,YAAV,EAAuBF,MAAM,CAACM,OAA9B;AAFX,OAAN;;AAIJ;AACI,aAAOP,KAAP;AAZR;AAcH,CAfD;;KAAMD,U;AAyBN,MAAMS,YAAY,GAAG;AACjBL,EAAAA,YAAY,EAAC;AADI,CAArB,C,CAKA;;AACA,OAAO,MAAMM,aAAa,gBAAGZ,aAAa,CAACW,YAAD,CAAnC,C,CAEP;;AACA,OAAO,MAAME,cAAc,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAc;AAAA;;AACxC,QAAM,CAACX,KAAD,EAAOY,QAAP,IAAmBd,UAAU,CAACC,UAAD,EAAaS,YAAb,CAAnC,CADwC,CAExC;;AACA,WAASK,iBAAT,CAA2BP,EAA3B,EAA8B;AAC1BM,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAC,QADA;AAELK,MAAAA,OAAO,EAACD;AAFH,KAAD,CAAR;AAIH;;AACD,WAASQ,cAAT,CAAwBT,KAAxB,EAA8B;AAC1BO,IAAAA,QAAQ,CAAC;AACLV,MAAAA,IAAI,EAAC,KADA;AAELK,MAAAA,OAAO,EAACF;AAFH,KAAD,CAAR;AAIH;;AACD,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BF,MAAAA,YAAY,EAACH,KAAK,CAACG,YADQ;AAE3BU,MAAAA,iBAF2B;AAG3BC,MAAAA;AAH2B,KAA/B;AAAA,cAKKH;AALL;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CAxBM;;GAAMD,c;;MAAAA,c","sourcesContent":["import { createContext,useReducer } from \"react\";\n//Reducer\n\nconst AppReducer = (state,action)=>{\n    switch(action.type){\n        case 'DELETE':\n            return{\n                ...state,\n                transactions: state.transactions.filter(trans=>trans.id !== action.payload)\n            }\n        case 'ADD':\n            return{\n                ...state,\n                transactions:[...state.transactions,action.payload]\n            }    \n        default:\n            return state\n    }\n}\n\n\n\n\n\n\n\n\n\nconst initialState = {\n    transactions:[\n\n    ]\n};\n//Create context\nexport const GlobalContext = createContext(initialState)\n\n//Provider component\nexport const GlobalProvider = ({children})=>{\n    const [state,dispatch] = useReducer(AppReducer, initialState);\n    //Actions\n    function deleteTransaction(id){\n        dispatch({\n            type:'DELETE',\n            payload:id,\n        })\n    }\n    function addTransaction(trans){\n        dispatch({\n            type:'ADD',\n            payload:trans,\n        })\n    }\n    return(\n        <GlobalContext.Provider value={{\n            transactions:state.transactions,\n            deleteTransaction,\n            addTransaction,\n        }}>\n            {children}\n        </GlobalContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}